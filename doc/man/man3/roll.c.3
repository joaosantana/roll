.TH "roll.c" 3 "Mon Jun 20 2016" "roll" \" -*- nroff -*-
.ad l
.nh
.SH NAME
roll.c \- The main application file\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'roll\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBir_node\fP * \fBallocate_node\fP (void)"
.br
.RI "\fIAllocates a new IR node\&. \fP"
.ti -1c
.RI "int \fBcompare\fP (const void *p1, const void *p2)"
.br
.RI "\fIComparison function for qsort\&. \fP"
.ti -1c
.RI "void \fBerror\fP (char *message)"
.br
.RI "\fIPrints the specified error message and exits with a failure status\&. \fP"
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.RI "\fIMain program\&. \fP"
.ti -1c
.RI "struct \fBir_node\fP * \fBnew_dice\fP (struct \fBir_node\fP *sides)"
.br
.RI "\fIAllocates a new DICE node\&. \fP"
.ti -1c
.RI "struct \fBir_node\fP * \fBnew_number\fP (int number)"
.br
.RI "\fIAllocates a new NUMBER node\&. \fP"
.ti -1c
.RI "struct \fBir_node\fP * \fBnew_op\fP (unsigned short int op, struct \fBir_node\fP *left, struct \fBir_node\fP *right)"
.br
.RI "\fIAllocates a new OP node\&. \fP"
.ti -1c
.RI "int \fBroll\fP (int dice)"
.br
.RI "\fIRolls an n-sided dice\&. \fP"
.ti -1c
.RI "int \fBroll_dice\fP (int sides)"
.br
.RI "\fIWrapper for \fBroll(int dice)\fP translates special dices (e\&.g\&., d%) \fP"
.ti -1c
.RI "int \fBroll_expression\fP (struct \fBir_node\fP *node, int print)"
.br
.RI "\fIRoll dices and compute expressions\&. \fP"
.ti -1c
.RI "void \fBusage\fP ()"
.br
.RI "\fIPrints the program's usage\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBpositive_flag\fP"
.br
.ti -1c
.RI "int \fBsum_flag\fP = \fBFALSE\fP"
.br
.ti -1c
.RI "static int \fBverbose_flag\fP = \fBFALSE\fP"
.br
.ti -1c
.RI "static int \fBversion_flag\fP = \fBFALSE\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The main application file\&. 


.PP
\fBAuthor:\fP
.RS 4
Matteo Corti 
.RE
.PP

.PP
Definition in file \fBroll\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "struct \fBir_node\fP* allocate_node (void)"

.PP
Allocates a new IR node\&. 
.PP
\fBReturns:\fP
.RS 4
Newly allocated node 
.RE
.PP

.PP
Definition at line 266 of file roll\&.c\&.
.PP
References error(), ir_node::left, ir_node::next, ir_node::op, ir_node::right, and ir_node::value\&.
.PP
Referenced by new_dice(), new_number(), and new_op()\&.
.PP
.nf
266                                          {
267 
268   struct ir_node * node = malloc(sizeof(struct ir_node));
269   if (node == NULL) {
270     error("Out of memory\n");
271     exit(EXIT_FAILURE);
272   }
273 
274   /* initialize default values */
275   node->left  = NULL;
276   node->right = NULL;
277   node->next  = NULL;
278   node->op    = 0;
279   node->value = 0;
280   
281   return node;
282   
283 }
.fi
.SS "int compare (const void * p1, const void * p2)"

.PP
Comparison function for qsort\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 306 of file roll\&.c\&.
.PP
Referenced by roll_expression()\&.
.PP
.nf
306                                               {
307 
308   const int i1 = *((const int *)p1);
309   const int i2 = *((const int *)p2);
310 
311   if (i1 > i2) {
312     return 1;
313   } else if (i1 < i2) {
314     return -1;
315   } else {
316     return 0;
317   }
318   
319 }
.fi
.SS "void error (char * message)"

.PP
Prints the specified error message and exits with a failure status\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 50 of file roll\&.c\&.
.PP
Referenced by allocate_node(), main(), and roll_expression()\&.
.PP
.nf
50                            {
51   fprintf(stderr, "\nError: %s\n", message);
52   exit(EXIT_FAILURE);
53 }
.fi
.SS "int main (int argc, char ** argv)"

.PP
Main program\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 150 of file roll\&.c\&.
.PP
References error(), EXPRESSION_SIZE, positive_flag, srandomdev, sum_flag, TRUE, usage(), verbose_flag, and version_flag\&.
.PP
.nf
150                                 {
151 
152   char   expression[EXPRESSION_SIZE];
153   int    expression_size;
154   
155   srandomdev();
156      
157   while (TRUE) {
158 
159     static struct option long_options[] = {
160       {"sum-series",  no_argument,       NULL, 's'},
161       {"positive",    no_argument,       NULL, 'p'},
162       {"verbose",     no_argument,       NULL, 'v'},
163       {"version",     no_argument,       &version_flag, TRUE},
164       {"help",        no_argument,       NULL, 'h'},
165 #ifdef DEBUG
166       {"debug",       no_argument,       NULL, 'd'},
167 #endif
168       {NULL, 0, NULL, 0}
169     };
170 
171     /* getopt_long stores the option index here\&. */
172     int option_index = 0;
173 
174     int c;
175     
176 #ifdef DEBUG
177     c = getopt_long (argc, argv, "hvspd",
178              long_options, &option_index);
179 #else
180     c = getopt_long (argc, argv, "hvsp",
181              long_options, &option_index);
182 #endif
183     
184     /* Detect the end of the options\&. */
185     if (c == -1)
186       break;
187      
188     switch (c) {
189 
190     case 'v':
191       verbose_flag = TRUE;
192       break;
193 
194     case 's':
195       sum_flag = TRUE;
196       break;
197       
198     case 'p':
199       positive_flag = TRUE;
200       break;
201 
202     case 'h':
203       usage();
204       exit(0);
205 
206     case '?':
207       usage();
208       /* getopt_long already printed an error message\&. */
209       exit(EXIT_SUCCESS);
210 
211 #ifdef DEBUG
212     case 'd':
213       debug_flag++;
214       break;      
215 #endif
216       
217     case 0:
218       break;
219 
220     default:
221       abort ();
222     }
223 
224   }
225 
226   if (version_flag) {
227     printf("%s %s\n", PACKAGE_NAME, PACKAGE_VERSION);
228     exit(EXIT_SUCCESS);
229   }      
230 
231   argc -= optind;
232   argv += optind;         
233   
234   /* build string to parse */
235   expression[0] = '\0';
236   expression_size = 0;
237   while(argc>0) {
238     expression_size += strlen(*argv);
239     if (expression_size >= EXPRESSION_SIZE) {
240       error("Expression too long!\n");
241     }
242     strncat(expression, *argv, EXPRESSION_SIZE-1);
243     argc--;
244     argv++;
245   }
246   
247   if (expression_size > 0) {
248     
249     yy_scan_string(expression);
250 
251     yyparse();
252 
253   } else {
254     error("No expression provided!\nPlease use the \"-h\" option\&.\n");
255     exit(EXIT_FAILURE);
256   }
257 
258   return 0;
259 
260 }
.fi
.SS "struct \fBir_node\fP* new_dice (struct \fBir_node\fP * sides)"

.PP
Allocates a new DICE node\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 344 of file roll\&.c\&.
.PP
References allocate_node(), ir_node::op, OP_DICE, ir_node::right, and ir_node::value\&.
.PP
.nf
344                                                     {
345   
346   struct ir_node * node = allocate_node();
347   node->op    = OP_DICE;
348   node->value = 0;
349   node->right = sides;
350   return node;
351   
352 }
.fi
.SS "struct \fBir_node\fP* new_number (int number)"

.PP
Allocates a new NUMBER node\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 290 of file roll\&.c\&.
.PP
References allocate_node(), ir_node::op, OP_NUMBER, and ir_node::value\&.
.PP
.nf
290                                            {
291 
292   struct ir_node * node = allocate_node();
293   node->op    = OP_NUMBER;
294   node->value = number;
295 
296   return node;
297 
298 }
.fi
.SS "struct \fBir_node\fP* new_op (unsigned short int op, struct \fBir_node\fP * left, struct \fBir_node\fP * right)"

.PP
Allocates a new OP node\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 328 of file roll\&.c\&.
.PP
References allocate_node(), ir_node::left, ir_node::op, ir_node::right, and ir_node::value\&.
.PP
.nf
328                                                                                                 {
329 
330   struct ir_node * node = allocate_node();
331   node->op    = op;
332   node->value = 0;
333   node->left  = left;
334   node->right = right;
335   return node;
336   
337 }
.fi
.SS "int roll (int dice)"

.PP
Rolls an n-sided dice\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 124 of file roll\&.c\&.
.PP
Referenced by roll_dice()\&.
.PP
.nf
124                    {
125 
126   /* 
127    * In: W\&. H\&. Press et al,Numerical Recipes in C: The Art of
128    * Scientific Computing\&.  New York, Cambridge University Press,
129    * 1992, 2nd ed\&., p\&. 277
130    *
131    * "If you want to generate a random integer between 1 
132    *  and 10, you should always do it by using high-order
133    *  bits, as in
134    *
135    *  j=1+(int) (10\&.0*rand()/(RAND_MAX+1\&.0));
136    */
137 
138   int res = 1+(int)(((double)dice)*random()/(RAND_MAX+1\&.0));
139 
140   return res;
141 
142 }
.fi
.SS "int roll_dice (int sides)"

.PP
Wrapper for \fBroll(int dice)\fP translates special dices (e\&.g\&., d%) 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 59 of file roll\&.c\&.
.PP
References HUNDRED, roll(), and verbose_flag\&.
.PP
Referenced by roll_expression()\&.
.PP
.nf
59                          {
60 
61   int result = 0;
62   
63   if ( sides == HUNDRED ) {
64     
65     /* d100 -> d10*10+d10 */
66     
67     int d10 = roll(10);
68     if (verbose_flag) {
69       printf("d10 -> %i\n", d10);
70     }
71     d10 = d10 % 10;
72     
73     int d1 = roll(10);
74     if (verbose_flag) {
75       printf("d10 -> %i\n", d1);
76     }
77     
78     if (d1 == 0 && d10 == 0) {
79       result = 100;
80     } else if (d10 == 0) {
81       result = d1;
82     } else {
83       result = d10*10 + d1;
84     }
85 
86   } else if ( sides == FUDGE_DICE ) {
87 
88     result = roll(3) - 2;
89 
90     if (verbose_flag) {
91 
92       switch (result) {
93       case -1:
94         printf("dF -> -\n");
95         break;
96       case 0:
97         printf("dF -> o\n");
98         break;
99       case 1:
100         printf("dF -> +\n");
101         break;        
102       }
103     }
104     
105   } else {
106 
107     result = roll(sides);
108     
109     if (verbose_flag) {
110       printf("d%i -> %i\n", sides, result);
111     }
112 
113   }
114 
115   return result;
116   
117 }
.fi
.SS "int roll_expression (struct \fBir_node\fP * node, int print)"

.PP
Roll dices and compute expressions\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.PP
Definition at line 376 of file roll\&.c\&.
.PP
References compare(), error(), FALSE, ir_node::left, ir_node::next, ir_node::op, OP_DICE, OP_DIV, OP_GE, OP_GT, OP_HIGH, OP_LE, OP_LOW, OP_LT, OP_MINUS, OP_NE, OP_NUMBER, OP_PLUS, OP_REP, OP_TIMES, ir_node::right, roll_dice(), roll_expression(), TRUE, and ir_node::value\&.
.PP
Referenced by roll_expression()\&.
.PP
.nf
376                                                          {
377 
378   int  high;
379   int  i;
380   int  limit;
381   int  low;
382   int  repetitions;
383   int  return_value = 0;
384   int  sides;
385   int  tmp;
386   int * results;
387 
388   struct ir_node * cur;
389 
390   cur = node;
391   while (cur != NULL) {
392 
393     int sum = 0;
394 
395     switch (cur->op) {
396     
397     case OP_NUMBER:
398       sum = cur->value;
399       break;
400 
401     case OP_REP:
402 
403       for (i = 0; i < roll_expression(cur->left, FALSE); i++) {
404         sum = checked_sum( sum, roll_expression(cur->right, FALSE) );
405       }
406       break;
407       
408     case OP_DICE:
409       sum = roll_dice( roll_expression(cur->right, FALSE) );
410       break;
411       
412     case OP_PLUS:
413       sum = checked_sum( roll_expression( cur->left,  FALSE ),
414                          roll_expression( cur->right, FALSE ) );
415       break;
416       
417     case OP_MINUS:
418       sum = checked_sum( roll_expression( cur->left,  FALSE ),
419                          -roll_expression( cur->right, FALSE ) );
420       break;
421       
422     case OP_TIMES:
423       sum = checked_multiplication( roll_expression( cur->left,  FALSE ),
424                                    roll_expression( cur->right, FALSE ) );
425       break;
426       
427     case OP_DIV:
428       sum = (int)
429         ceil( (float)roll_expression( cur->left,  FALSE ) /
430               roll_expression( cur->right, FALSE ) );
431       break;
432       
433     case OP_HIGH:
434 
435       sides       = roll_expression(cur->right->right->right, FALSE);
436       repetitions = roll_expression(cur->right->left,  FALSE);
437       high        = roll_expression(cur->left, FALSE);      
438 
439       /* array to store the results to sort */
440       if (!(results = malloc(sizeof(int)*repetitions))) {
441         error("Out of memory");
442       }
443       
444       for(i=0; i<repetitions; i++) {
445         results[i] = roll_dice(sides);
446       }
447       qsort(results, repetitions, sizeof(int), &compare);
448 
449       for(i=(repetitions-high); i<repetitions; i++) {
450         sum = checked_sum( sum, results[i] );
451       }
452       
453       free(results);
454       
455       break;
456       
457     case OP_LOW:
458       
459       sides       = roll_expression(cur->right->right->right, FALSE);
460       repetitions = roll_expression(cur->right->left,  FALSE);
461       low         = roll_expression(cur->left, FALSE);
462       
463       if (cur->right->left != NULL) {
464         repetitions = roll_expression(cur->right->left, FALSE);
465       }
466                   
467       /* array to store the results to sort */
468       if (!(results = malloc(sizeof(int)*repetitions))) {
469         error("Out of memory");
470       }
471       
472       for(i=0; i<repetitions; i++) {
473         results[i] = roll_dice(sides);
474       }
475       qsort(results, repetitions, sizeof(int), &compare);
476       for(i=0; i<low; i++) {
477         sum = checked_sum( sum, results[i] );
478       }
479       
480       free(results);
481       
482       break;
483 
484     case OP_GT:
485       
486       limit = roll_expression(cur->right, FALSE);      
487       tmp   = roll_expression(cur->left,  FALSE);
488       while (tmp <= limit) {
489         tmp = roll_expression(cur->left, FALSE);
490       }
491       sum = checked_sum( sum, tmp );
492       
493       break;
494       
495     case OP_GE:
496       
497       limit = roll_expression(cur->right, FALSE);      
498       tmp   = roll_expression(cur->left,  FALSE);
499       while (tmp < limit) {
500         tmp = roll_expression(cur->left, FALSE);
501       }
502       sum = checked_sum( sum, tmp );
503       
504       break;
505       
506     case OP_LT:
507       
508       limit = roll_expression(cur->right, FALSE);      
509       tmp   = roll_expression(cur->left,  FALSE);
510       while (tmp >= limit) {
511         tmp = roll_expression(cur->left, FALSE);
512       }
513       sum = checked_sum( sum, tmp );
514       
515       break;
516       
517     case OP_LE:
518       
519       limit = roll_expression(cur->right, FALSE);      
520       tmp   = roll_expression(cur->left,  FALSE);
521       while (tmp > limit) {
522         tmp = roll_expression(cur->left, FALSE);
523       }
524       sum = checked_sum( sum, tmp );
525       
526       break;
527       
528     case OP_NE:
529       
530       limit = roll_expression(cur->right, FALSE);      
531       tmp   = roll_expression(cur->left,  FALSE);
532       while (tmp == limit) {
533         tmp = roll_expression(cur->left, FALSE);
534       }
535       sum = checked_sum( sum, tmp );
536       
537       break;
538       
539     default :
540       
541       fprintf(stderr, "Implementation error: unkown IR node with code %i\n", cur->op);
542       exit(EXIT_FAILURE);
543       
544     }
545 
546     return_value = checked_sum( return_value, sum);
547     if (print == TRUE) {
548       printf("%i\n", sum);
549     }
550     
551     cur = cur->next;
552     
553   }
554 
555   return return_value;
556   
557 }
.fi
.SH "Variable Documentation"
.PP 
.SS "int positive_flag"
command line argument: allow only positive results 
.PP
Referenced by main()\&.
.SS "int sum_flag = \fBFALSE\fP"
command line argument: sum series 
.PP
Definition at line 16 of file roll\&.c\&.
.PP
Referenced by main()\&.
.SS "int verbose_flag = \fBFALSE\fP\fC [static]\fP"
command line argument: verbose output 
.PP
Definition at line 17 of file roll\&.c\&.
.PP
Referenced by main(), and roll_dice()\&.
.SS "int version_flag = \fBFALSE\fP\fC [static]\fP"
command line argument: version 
.PP
Definition at line 18 of file roll\&.c\&.
.PP
Referenced by main()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for roll from the source code\&.
